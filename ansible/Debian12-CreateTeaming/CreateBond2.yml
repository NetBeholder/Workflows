# Initial Debian 12 Server setup
#
#
---
- hosts: deb12_bonding_hosts
  #become: true
  vars:
    #ssh_port: "22"
    net_config:
      bondings:
      - name: bond0 #native (management) vlan?
        mode: active-passive
        primary_interface: enp1s0
        members:
          - enp1s0 # initially management interface
          - enp7s0
        ip_settings: #адрес не нужен, если сверху будет мост и машины в management vlan-е, иначе можно указать, шлюз должен быть только один, в остальных случаях - none
          address: none # 192.168.16.12/24
          gateway: none # 192.168.16.1
      - name: bond1 # LACP -- не протестировать (
        mode: active-passive
        primary_interface: enp9s0
        members:
          - enp9s0
          - enp10s0
        ip_settings: #адрес не нужен, если сверху будет мост и машины в management vlan-е
          address: 192.168.50.1/24 #none # none - сверху будет мост с адресом. адрес должен быть либо у моста, либо у тиминга
          gateway: none
      vlans:
        vlan_interfaces:
          system:
            - name: 20 #backup vlan
              parent_interface: bond0
              ip_settings:
                address: none # 192.168.20.9/24
                gateway: none # 192.168.20.1
            - name: 30 # iscsi vlan
              parent_interface: bond0
              ip_settings:
                address: none # 192.168.30.9/24
                gateway: none # 192.168.30.1
          guests:
            - name: 40 # guest vlan-40
              parent_interface: bond0
              ip_settings:
                address: none
                gateway: none 
      bridges:
        bridge_interfaces:
          system:
            - name: br-sys-mgmt #management vlan
              parent_interface: bond0
              ip_settings:
                address: 192.168.16.12/24
                gateway: 192.168.16.1
            - name: br-sys-storage # iscsi vlan
              parent_interface: bond0.20
              ip_settings:
                address: 192.168.20.9/24
                gateway: none # 192.168.20.1
            - name: br-sys-backup # backup vlan
              parent_interface: bond0.30
              ip_settings:
                address: 192.168.30.9/24
                gateway: none # 192.168.30.1
          guests:
            - name: br-gst-vlan40
              parent_interface: bond0.40
              ip_settings:
                address: none
                gateway: none
    interfaces_list:
      - enp1s0 # initially management interface
      - enp7s0
  pre_tasks:
    - include_vars: vars/test.yaml
    #    - name: apt update
    #      apt:
    #        update_cache: yes
    #        cache_valid_time: 900
    #          #    - name: apt upgrade
    #          #      apt: 
    #          #        upgrade: yes
    #    - name: check/install sudo package
    #      apt:
    #        pkg:
    #          - sudo
    #          - ethtool
    #          - ifupdown
    #          - vlan
    #          - bridge-utils
    #        state: latest
          #    - name: create wheel group (for su restricted escalation via pam)
          #      ansible.builtin.group:
          #        name: wheel
          #        system: yes
          #        state: present
  tasks:
    - name: print var from file
      debug:
        msg: Hello, {{ hostname }}
    #    - name: print facts
    #      ansible.builtin.debug:
    #        var: ansible_facts

        #    - name: active-passive bondings...
        #      debug:
        #        msg: |
        #          auto {{ item.name }}
        #          iface {{ item.name }} inet dhcp
        #          bond-slaves {{ item.members | join ('') }}
        #          bond-mode active-backup
        #          bond-primary {{ item.primary_interface }}
        #          bond-miimon 100
        #          bond-downdelay 300
        #          bond-updelay 700
        #      loop: "{{ net_config }}"
        #      when: item.mode == 'active-passive'

    #    - name: Create new interface file
    #      copy:
    #        dest: "/etc/network/interface2"
    #        content: |

    #          source /etc/network/interfaces.d/*

    #          auto lo
    #          iface lo inet loopback
    #
    #          {% for i in item.members %}
    #            auto {{ i }}
    #            iface {{ i }} inet manual
    #          {% endfor %}
    #      loop: "{{ net_config['bondings'] }}"
    - name: Create new interface file
      ansible.builtin.copy:
        dest: "/etc/network/interfaces"
        content: |
          source /etc/network/interfaces.d/*

          auto lo
          iface lo inet loopback

          # created by Ansible
        backup: yes
    - name: "Verify that string exists in file"
      find:
        name: "/etc/network/"
        patterns: "interfaces"
        file_type: file
        use_regex: false
        read_whole_file: true
        contains: |
          {% for i in item.members %}
          auto {{ i }}
          iface {{ i }} inet manual
          {% endfor %}
      loop: "{{ net_config['bondings'] | reverse }}"
      register: find_result
        #failed_when: find_result.matched == 0


        #    - name: print debug info...
        #      debug:
        #        var: find_result.results | type_debug


        #    - name: print find_result loop
        #      debug:
        #        msg: "{{ item.matched }}"
        #          #var: find_result 
        #      loop: "{{ find_result.results }}"

        #    - name: print absent item 
        #      debug:
        #        msg: "{{ item.item }}"
        #          #var: find_result
        #      when: item.matched != 1
        #      loop: "{{ find_result.results }}"
    
    # добавим только те интерфейсы, для которых нет настроек.
    - name: Fullfill interface file...
      ansible.builtin.lineinfile:
        path: "/etc/network/interfaces"
        line: |
          {% for i in item.item.members %}
          auto {{ i }}
          iface {{ i }} inet manual
          {% endfor %}
        insertafter: '# created by Ansible'
      when: item.matched != 1
      loop: "{{ find_result.results }}"

    - name: Create BONDing interface files for active-passive
      copy:
        #dest: "/tmp/{{ item.name }}"
        dest: "/etc/network/interfaces.d/{{ item.name }}"
        content: |
          auto {{ item.name }}
          {% if item.ip_settings.address != "none" %}
          iface {{ item.name }} inet static
            address {{ item.ip_settings.address }}
            {% if item.ip_settings.gateway != "none" %}
            gateway {{ item.ip_settings.gateway }}
            {% endif %}
          {% else %}
          iface {{ item.name }} inet manual
          {% endif %}
          bond-slaves {{ item.members | join (' ') }}
          bond-mode 1
          bond-primary {{ item.primary_interface }}
      loop: "{{ net_config['bondings'] }}"
      when: item.mode == 'active-passive'

          #          {% if item.ip_settings.address != "none" %}
          #          auto {{ item.name }}
          #          iface {{ item.name }} inet static
          #            address {{ item.ip_settings.address }}
          #            gateway {{ item.ip_settings.gateway }}
          #          bond-slaves {{ item.members | join (' ') }}
          #          bond-mode 1
          #          bond-primary {{ item.primary_interface }}
          #          {% else %}
          #          auto {{ item.name }}
          #          iface {{ item.name }} inet manual
          #          bond-slaves {{ item.members | join (' ') }}
          #          bond-mode 1
          #          bond-primary {{ item.primary_interface }}
          #          {% endif %}
          #          address {{ item.ip_settings.address }}
          #          gateway {{ item.ip_settings.gateway }}

        #    - name: vlan interfaces over bond
        #      copy:
        #        dest: "/etc/network/interfaces.d/{{ item.parent_interface }}.{{ item.name }}"
        #        content: |
        #          auto {{ item.parent_interface }}.{{ item.name }}
        #          iface {{ item.parent_interface }}.{{ item.name }} inet manual
        #            vlan_raw_device {{ item.parent_interface }}
        #      loop: "{{ net_config['vlans']['vlan_interfaces']['system'] }}"

    - name: Create VLAN interfaces
      copy:
        #dest: "/tmp/{{ item.parent_interface }}.{{ item.name }}"
        dest: "/etc/network/interfaces.d/{{ item.parent_interface }}.{{ item.name }}"
        content: |
          auto {{ item.parent_interface }}.{{ item.name }}
          {% if item.ip_settings.address != "none" %}
          iface {{ item.parent_interface }}.{{ item.name }} inet static
            address {{ item.ip_settings.address }}
            {% if item.ip_settings.gateway != "none" %}
            gateway {{ item.ip_settings.gateway }}
            {% endif %}
          {% else %}
          iface {{ item.parent_interface }}.{{ item.name }} inet manual
          {% endif %}
          vlan_raw_device {{ item.parent_interface }}
      with_items:
          - "{{ net_config['vlans']['vlan_interfaces']['system'] }}"
          - "{{ net_config['vlans']['vlan_interfaces']['guests'] }}"
        # из кода выше
          #            address {{ item.ip_settings.address }}
          #            gateway {{ item.ip_settings.gateway }}

          #          {% if item.ip_settings.address != "none" %}
          #          auto {{ item.parent_interface }}.{{ item.name }}
          #          iface {{ item.parent_interface }}.{{ item.name }} inet static
          #            address {{ item.ip_settings.address }}
          #            gateway {{ item.ip_settings.gateway }}
          #          vlan_raw_device {{ item.parent_interface }}
          #          {% else %}
          #          auto {{ item.parent_interface }}.{{ item.name }}
          #          iface {{ item.parent_interface }}.{{ item.name }} inet manual
          #          vlan_raw_device {{ item.parent_interface }}
          #          {% endif %}
          #loop: "{{ net_config['vlans']['vlan_interfaces']['system'] }}"

    - name: Create system bridges... 
      copy:
        dest: "/etc/network/interfaces.d/{{ item.name }}"
        content: |
          auto {{ item.name }}
          {% if item.ip_settings.address != "none" %}
          iface {{ item.name }} inet static
            address {{ item.ip_settings.address }}
            {% if item.ip_settings.gateway != "none" %}
            gateway {{ item.ip_settings.gateway }} 
            {% endif %}
          {% else %}
          iface {{ item.name }} inet manual
          {% endif %}
          bridge_ports {{ item.parent_interface }}
      with_items:
        - "{{ net_config['bridges']['bridge_interfaces']['system'] }}"
        - "{{ net_config['bridges']['bridge_interfaces']['guests'] }}"

        #    - name: ifup
        #      ansible.builtin.shell:
        #        ifup bond0
        #
    - name: reboot
      reboot:
        reboot_timeout: 120
        #    - name: cycle
        #      debug:
        #        msg: |
        #          auto bond0
        #          iface bond0 inet dhcp
        #          bond-slaves "{{ interfaces_list | join (' ') }}"
        #          bond-mode active-backup
        #          bond-primary enp1s0
        #
        #          {% for i in interfaces_list %}
        #            auto {{ i }}
        #            iface {{ i }} inet dhcp
        #            bond-master bond0
        #            bond-mode active-backup
        #          {% endfor %}
    #    - name: create user with sudo privileges
    #      ansible.builtin.user:
    #        name: "{{ AnsibleUserName }}"
    #        password: "{{ AnsibleUserName_passwd | password_hash('sha512') }}"
    #        shell: /bin/bash
    #        groups: sudo
    #        append: yes
    #
    #    - name: sudoers settings for user {{ AnsibleUserName }}
    #      copy:
    #        dest: "/etc/sudoers.d/{{ AnsibleUserName }}"
    #        content: |
    #          {{ AnsibleUserName }} ALL=(ALL) NOPASSWD:ALL
    #
    #    - name: generate keys pair for newly created user.
    #      become: false
    #      delegate_to: localhost
    #      community.crypto.openssh_keypair:
    #        path: keys/{{ AnsibleUserName }}_ssh_ed25519
    #        type: ed25519
    #        mode: '0400'
    #
    #    - name: Set authorized key taken from file on remote server
    #      ansible.posix.authorized_key:
    #        user: "{{ AnsibleUserName }}"
    #        state: present
    #        key: "{{ lookup('file', 'keys/{{ AnsibleUserName }}_ssh_ed25519.pub') }}"
    #
    #    - name: set /etc/hosts settings part 1
    #      ansible.builtin.lineinfile:
    #        path: /etc/hosts
    #        search_string: '127.0.0.1'
    #        line: "127.0.0.1 localhost"
    #
    #    - name: set /etc/hosts settings part 2
    #      ansible.builtin.lineinfile:
    #        path: /etc/hosts
    #        search_string: '127.0.1.1'
    #        line: "127.0.1.1 {{ host_fqdn }} {{ hostname }}"
    #
    #    - name: check /etc/hostname
    #      ansible.builtin.shell: cat /etc/hostname
    #      register: host_hostname
    #
    #    - name: set hostname
    #      ansible.builtin.shell: hostnamectl set-hostname {{ hostname }}
    #      when: host_hostname.stdout != "{{ hostname }}"
    #
    #    - name: check timezone
    #      ansible.builtin.shell: timedatectl show | grep Timezone | cut -d "=" -f2
    #      register: tz
    #
    #    - name: set host's timezone
    #      ansible.builtin.command: timedatectl set-timezone {{ timezone }}
    #      when: tz.stdout != "{{ timezone }}"
    #
    #    - name: create drop-in folder for timcesyncd configs
    #      ansible.builtin.file:
    #        dest: /etc/systemd/timesyncd.conf.d/
    #        state: directory
    #
    #    - name: set timesyncd drop-in file(s)
    #      ansible.builtin.template:
    #        src: configs/etc/systemd/timesyncd.conf.d/10-enterprise-time-settings.conf.j2
    #        dest: /etc/systemd/timesyncd.conf.d/10-enterprise-time-settings.conf
    #        force: yes
    #
    #    - name: get ntp service status
    #      ansible.builtin.shell: timedatectl status | grep "NTP service" | cut -d":" -f2 | xargs
    #      register: NTP_service_state
    #
    #    - name: set NTP service state as active
    #      ansible.builtin.command: timedatectl set-ntp true
    #      when: NTP_service_state.stdout != "active"
    #
    #    - name: NetworkManager settings
    #      apt:
    #        pkg:
    #          - network-manager
    #
    #    - name: check masked status for networking.service
    #      ansible.builtin.shell: systemctl status networking.service | grep -o "masked" | uniq
    #      register: networking_service_masked_status
    #
    #    - name: mask ifupdown service
    #      ansible.builtin.command: systemctl mask networking.service
    #      when: networking_service_masked_status.stdout != "masked"
    #
    #    - name: stop networking.service
    #      ansible.builtin.service:
    #        name: networking
    #        state: stopped
    #
    #    - name: check interfaces file backup exists
    #      stat:
    #        path: /etc/network/interfaces.back
    #      register: interfaces_file_status
    #
    #    - name: backup interfaces.file
    #      shell: mv /etc/network/interfaces /etc/network/interfaces.back
    #      when: not interfaces_file_status.stat.exists
    #      register: interfaces_file_status
    #
    #    - name: nmcli add connection for ethernet
    #      community.general.nmcli:
    #        type: ethernet
    #        conn_name: "{{ nm_conn_name }}"
    #        ifname: "{{ nm_ifname }}"
    #        method4: auto
    #        state: present
    #
    #    - name: check status of loopback interface
    #      ansible.builtin.shell: nmcli d s | grep "loopback" | grep -o "(externally)" | tr -d '()'
    #      register: loopback_status
    #
    #    - name: nmcli add connection for loopback
    #      ansible.builtin.shell: "nmcli connection add connection.id lo connection.type loopback connection.interface-name lo connection.autoconnect yes"
    #      when: loopback_status.stdout == "externally"
    #
    #    - name: print interfaces_file_state
    #      ansible.builtin.debug:
    #        var: interfaces_file_status
    #
    #    - name: restarted NetworkManager service
    #      ansible.builtin.service:
    #        name: NetworkManager
    #        state: restarted
    #      when: interfaces_file_status
    #
    #    - name: install some packages 
    #      apt:
    #        pkg:
    #          - git
    #          - curl
    #          - htop
    #          - pwgen
    #          - neovim
    #          - lf
    #          - bind9-dnsutils
    #          - debian-goodies
    #          - cifs-utils
    #          - samba-client
    #          - psmisc
    #          - tree
    #        state: latest
    #
